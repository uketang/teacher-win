/*******************************************************************************
 * javascript glue wrapper of urtc module
 * @module urtc.js
 * @author zhoukai
*******************************************************************************/

var EventEmitter    = require('events').EventEmitter;
var urtc          = null;

if (process.urtcBuildType == 'debug') {
    urtc = require('./Debug/'+process.platform+'/urtc.node');
} else {
    urtc = require('./Release/'+process.platform+'/urtc.node');
}

//******************************************************************************
// Constant variables definition
//
// User Control Message (4)
// The client or the server sends this message to notify the peer about
// the user control events. This message carries Event type and Event
// data.
//******************************************************************************

const CONST = {
};
function copyProperties(target, source) {
    for (var k in source)
        target[k] = source[k];
}
copyProperties(urtc, CONST);

//*******************************************************************************
// Inherits
//*******************************************************************************

function inherits(target, source) {
  for (var k in source.prototype)
    target.prototype[k] = source.prototype[k];
}

inherits(urtc.RTC, EventEmitter);
inherits(urtc.Previewer, EventEmitter);
inherits(urtc.DeviceListener, EventEmitter);


/*******************************************************************************
* @class urtc.RTC
*******************************************************************************/

/**
 * @method _internalCallback
 * @private
 * 
 * 
 **/
urtc.RTC.prototype._internalCallback = function(type, __arg2, __arg3){
    switch(type){
        case 'selfJoined':
        case 'selfConnectTimeout':
        case 'selfOffline':
        case 'selfConnectRetry':
        case 'selfLeaved':
            this.emit(type);
            break;
        case 'selfConnected':
        case 'selfStopPublish':
            this.emit(type, __arg2);
            break;
        case 'peerJoined':
        case 'peerConnected':
        case 'peerConnectTimeout':
        case 'peerOffline':
        case 'peerConnectRetry':
        case 'statsResult':
            this.emit(type, __arg2);
            break;
        case 'peerLeaved':
        case 'peerAudioProgress':
        case 'message':
            this.emit(type, __arg2, __arg3);
            break;
        case 'close':
            this.emit('close');
            break;
    }
}

/**
 * 为特定事件添加一个监听处理程序.
 * 当前支持除'_error/_result/onStatus/error/close'等事件之外的 
 * 任何自定义事件.上述事件为内部保留事件，用户不应定义与这些事件同名的
 * 远程调用函数名。与用户自定义事件相对应的事件处理函数的参数列表与远端
 * 调用时传入的参数列表一致。
 *
 * @method on
 * @public
 * @async
 * @param event_name {String} 要订阅的事件名称
 * @param callback {function} 事件处理函数
 * @example
 *     client.on('error', function(err){
 *         if (err) {
 *             console.dir(err);
 *         }
 *     });
 **/

/**
 * 入会通知
 *
 * @event selfJoined
 * @param event {Object} 状态信息
 * @example
 *     client.on('selfJoined', function(info){
 *         console.dir(info);
 *     });
 **/

/**
 * 掉线通知
 *
 * @event selfOffline
 * @param event {Object} 状态信息
 * @example
 *     client.on('selfOffline', function(info){
 *         console.dir(info);
 *     });
 **/

/**
 * 推流成功通知
 *
 * @event selfConnected
 * @param event {Object} 状态信息
 * @example
 *     client.on('selfConnected', function(info){
 *         console.dir(info);
 *     });
 **/

/**
 * 连接超时通知
 *
 * @event selfConnectTimeout
 * @param event {Object} 状态信息
 * @example
 *     client.on('selfConnectTimeout', function(info){
 *         console.dir(info);
 *     });
 **/

/**
 * 出会通知
 *
 * @event selfLeaved
 * @param event {Object} 状态信息
 * @example
 *     client.on('selfLeaved', function(info){
 *         console.dir(info);
 *     });
 **/

/**
 * 其他用户入会通知
 *
 * @event peerJoined
 * @param event {Object} 状态信息
 * @example
 *     client.on('peerJoined', function(peerId){
 *         console.dir(peerId);
 *     });
 **/

/**
 * 请求其他用户音视频数据通知
 *
 * @event peerConnected
 * @param event {Object} 状态信息
 * @example
 *     client.on('peerConnected', function(peerId){
 *         console.dir(peerId);
 *     });
 **/

/**
 * 请求其他用户音视频数据超时通知
 *
 * @event peerConnectTimeout
 * @param event {Object} 状态信息
 * @example
 *     client.on('peerConnectTimeout', function(peerId){
 *         console.dir(peerId);
 *     });
 **/

/**
 * 其他用户掉线通知
 *
 * @event peerOffline
 * @param event {Object} 状态信息
 * @example
 *     client.on('peerOffline', function(peerId){
 *         console.dir(peerId);
 *     });
 **/

/**
 * 其他用户离会通知
 *
 * @event peerLeaved
 * @param event {Object} 状态信息
 * @example
 *     client.on('peerLeaved', function(peerId){
 *         console.dir(peerId);
 *     });
 **/

/**
 * 其他用户音频播放进度通知
 *
 * @event peerAudioProgress
 * @param event {Object} 状态信息
 * @example
 *     client.on('peerAudioProgress', function(peerId, pts){
 *         console.dir(peerId, pts);
 *     });
 **/

/**
 * 消息通知通知
 *
 * @event message
 * @param event {Object} 状态信息
 * @example
 *     client.on('message', function(name, args){
 *         console.dir(name, args);
 *     });
 **/

/**
 * 预览关闭事件及其事件监听处理程序.
 *
 * @event close
 * @example
 *     client.on('close', function(){
 *         // do something
 *     });
 **/

/**
 * 错误事件及其事件监听处理程序.
 * 如果添加'error'事件监听函数，则当出现内部错误时回调函数将被调用。
 *
 * @event error
 * @param error_msg {Error} 错误信息
 * @example
 *     client.on('error', function(err){
 *         if (err) {
 *             console.dir(err);
 *         }
 *     });
 **/

/**
 * 加入房间。
 *
 * @method joinRoom
 * @public
 * @sync
 * @example
 *     client.joinRoom(config);
 **/
urtc.RTC.prototype.joinRoom = function(config){
    if (typeof config !== 'object') {
        throw TypeError('Invalid config.')
    }
    return this.__joinRoom__(config);
}

/**
 * 退出房间。
 *
 * @method leaveRoom
 * @public
 * @sync
 * @example
 *     client.leaveRoom();
 **/
urtc.RTC.prototype.leaveRoom = function(){
    return this.__leaveRoom__();
}

/**
 * 获取摄像头信息。
 *
 * @method getCaptureInfo
 * @public
 * @sync
 * @example
 *     client.getCaptureInfo();
 **/
urtc.RTC.prototype.getCaptureInfo = function(){
    return this.__getCaptureInfo__();
}

/**
 * 打开摄像头。
 *
 * @method startCamera
 * @public
 * @sync
 * @param cameraIndex {Number} cameraIndex
 * @param width {Number} camera output width
 * @param height {Number} camera output height
 * @param fps {Number} camera output video frames per seconds
 * @return cameraId {Number} cameraId
 * @example
 *     client.startCamera(cameraIndex);
 **/
urtc.RTC.prototype.startCamera = function(cameraIndex, width, height, fps){
    if (typeof cameraIndex !== 'number' || typeof width !== 'number' ||
        typeof height !== 'number' || typeof fps !== 'number') {
        throw TypeError('Invalid arguments');
    }
    return this.__startCamera__(cameraIndex, width, height, fps);
}

/**
 * 关闭摄像头。
 *
 * @method stopCamera
 * @public
 * @sync
 * @parem cameraId {Number} cameraId
 * @example
 *     client.stopCamera(cameraId);
 **/
urtc.RTC.prototype.stopCamera = function(cameraId){
    if (typeof cameraId !== 'number') {
        throw TypeError('Invalid arguments');
    }
    return this.__stopCamera__(cameraId);
}

/**
 * 设置视频流渲染镜像。
 *
 * @method mirrorRenderStream
 * @public
 * @sync
 * @parem cameraId {Number} cameraId
 * @parem enable {Boolean} enable mirror
 * @parem mirror_xaxis {Boolean} mirror x axis
 * @parem mirror_yaxis {Boolean} mirror y axis
 * @example
 *     client.mirrorRenderStream(cameraId, true, false ,true);
 **/
urtc.RTC.prototype.mirrorRenderStream = function(cameraId, enable, 
    mirror_xaxis, mirror_yaxis){
    if (typeof cameraId !== 'number') {
        throw TypeError('Invalid arguments');
    }
    return this.__mirrorRenderStream__(cameraId, enable, mirror_xaxis, mirror_yaxis);
}

/**
 * 打开并附加音视频采集设备。
 *
 * @method attachMedia
 * @public
 * @sync
 * @param cameraId {Number} camera id
 * @param config {Object} config info
 * @return result {Number}
 * @example
 *     client.attachMedia(cameraId, config);
 **/
urtc.RTC.prototype.attachMedia = function(cameraId, config){
    if (typeof cameraId !== 'number' || typeof config !== 'object') {
        throw TypeError('Invalid arguments');
    }
    return this.__attachMedia__(cameraId, config);
}

/**
 * 向服务器推流。
 *
 * @method sendVideoData
 * @public
 * @sync
 * @param cameraId {Number} camera id
 * @return result {Number}
 * @example
 *     client.sendVideoData(cameraId);
 **/
urtc.RTC.prototype.sendVideoData = function(cameraId){
    if (typeof cameraId !== 'number') {
        throw TypeError('Invalid arguments');
    }
    return this.__sendVideoData__(cameraId);
}

/**
 * 停止向服务器推流。
 *
 * @method detachMedia
 * @public
 * @sync
 * @return result {Number}
 * @example
 *     client.detachMedia();
 **/
urtc.RTC.prototype.detachMedia = function(){
    return this.__detachMedia__();
}

/**
 * 添加预览器。
 *
 * @method addRenderer
 * @public
 * @sync
 * @param cameraId {Number} camera id
 * @return previewer {Previewer}
 * @example
 *     client.addRenderer(cameraId);
 **/
urtc.RTC.prototype.addRenderer = function(cameraId){
    if (typeof cameraId !== 'number') {
        throw TypeError('Invalid arguments');
    }
    return this.__addRenderer__(cameraId);
}

/**
 * 移除预览器。
 *
 * @method removeRenderer
 * @public
 * @sync
 * @param userId {String} user id
 * @return result {Number}
 * @example
 *     client.removeRenderer(userId);
 **/
urtc.RTC.prototype.removeRenderer = function(userId){
    if (typeof userId !== 'string') {
        throw TypeError('Invalid arguments');
    }
    return this.__removeRenderer__(userId);
}

/**
 * 移除所有预览器。
 *
 * @method removeAllRenderers
 * @public
 * @sync
 * @return result {Number}
 * @example
 *     client.removeAllRenderers();
 **/
urtc.RTC.prototype.removeAllRenderers = function(){
    return this.__removeAllRenderers__();
}

/**
 * 添加远端用户视频。
 *
 * @method addUser
 * @public
 * @sync
 * @param roomId {String} room id
 * @param userId {String} user id
 * @return previewer {Previewer}
 * @example
 *     client.addUser(roomId, userId);
 **/
urtc.RTC.prototype.addUser = function(roomId, userId){
    if (typeof roomId !== 'string' || typeof userId !== 'string') {
        throw TypeError('Invalid arguments');
    }
    return this.__addUser__(roomId, userId);
}

/**
 * 移除远端用户数据源。
 *
 * @method removeUser
 * @public
 * @sync
 * @param userId {String} user id
 * @return result {Number}
 * @example
 *     client.removeUser(userId);
 **/
urtc.RTC.prototype.removeUser = function(userId){
    if (typeof userId !== 'string') {
        throw TypeError('Invalid arguments');
    }
    return this.__removeUser__(userId);
}

/**
 * 移除所有远端用户数据源。
 *
 * @method removeAllUsers
 * @public
 * @sync
 * @return result {Number}
 * @example
 *     client.removeAllUsers();
 **/
urtc.RTC.prototype.removeAllUsers = function(){
    return this.__removeAllUsers__();
}

/**
 * 添加rtmp视频源。
 *
 * @method addSource
 * @public
 * @sync
 * @param srcUrl {String} rtmp source url
 * @return previewer {Previewer}
 * @example
 *     client.addSource(srcUrl);
 **/
urtc.RTC.prototype.addSource = function(srcUrl){
    if (typeof srcUrl !== 'string') {
        throw TypeError('Invalid arguments');
    }
    return this.__addSource__(srcUrl);
}

/**
 * 移除rtmp视频源。
 *
 * @method removeSource
 * @public
 * @sync
 * @param srcUrl {String} rtmp source url
 * @return result {Number}
 * @example
 *     client.removeSource(srcUrl);
 **/
urtc.RTC.prototype.removeSource = function(srcUrl){
    if (typeof srcUrl !== 'string') {
        throw TypeError('Invalid arguments');
    }
    return this.__removeSource__(srcUrl);
}

/**
 * 关闭播放器。
 *
 * @method close
 * @public
 * @sync
 * @example
 *     client.close();
 **/
urtc.RTC.prototype.close = function(){
    return this.__close__();
}

/*******************************************************************************
* @class urtc.Previewer
*******************************************************************************/

/**
 * @method _internalCallback
 * @private
 * 
 * 
 **/
urtc.Previewer.prototype._internalCallback = function(type, __arg2, __arg3){
    switch(type){
        case 'close':
            this.emit('close');
            break;
        case 'update':
            this.emit(type, __arg2, __arg3);
            break;
    }
}

/**
 * 为特定事件添加一个监听处理程序.
 *
 * @method on
 * @public
 * @async
 * @param event_name {String} 要订阅的事件名称
 * @param callback {function} 事件处理函数
 * @example
 *     previewer.on('error', function(err){
 *         if (err) {
 *             console.dir(err);
 *         }
 *     });
 **/

/**
 * 预览关闭事件及其事件监听处理程序.
 *
 * @event close
 * @example
 *     previewer.on('close', function(){
 *         // do something
 *     });
 **/

/**
 * 错误事件及其事件监听处理程序.
 * 如果添加'error'事件监听函数，则当出现内部错误时回调函数将被调用。
 *
 * @event error
 * @param error_msg {Error} 错误信息
 * @example
 *     previewer.on('error', function(err){
 *         if (err) {
 *             console.dir(err);
 *         }
 *     });
 **/

/**
 * 视频图像数据
 *
 * @event data
 * @param width {Number} 画面宽度
 * @param height {Number} 画面高度
 * @example
 *     previewer.on('data', function(width, height){
 *         console.dir(width, height);
 *     });
 **/

/**
 * 开始渲染。
 *
 * @method startRender
 * @public
 * @sync
 * @param config {Object} render config. 
 *         {
 *             mirrorX : true/false,
 *             mirrorY : true/false
 *         }
 * @example
 *     previewer.startRender({mirrorY : true});
 **/
urtc.Previewer.prototype.startRender = function(){
    return this.__startRender__.apply(this, arguments);
}

/**
 * 获取图像数据。
 *
 * @method copyImage
 * @public
 * @sync
 * @param buffer {Uint8ClampedArray} ImageData buffer. 
 * @param width {Number} ImageData width. 
 * @param height {Number} ImageData height. 
 * @example
 *     previewer.copyImage(buffer, width, height);
 **/
urtc.Previewer.prototype.copyImage = function(buffer, width, height){
    return this.__copyImage__(buffer, width, height);
}

/**
 * 指定图像绘制画布。
 *
 * @method attachCanvas
 * @public
 * @sync
 * @param canvas {Canvas} canvas element.
 * @example
 *     previewer.attachCanvas(canvas);
 **/
urtc.Previewer.prototype.attachCanvas = function(canvas){
    if (this.canvas != canvas) {
        this.canvas = canvas;
        this.context = canvas.getContext('2d');
        this.image = this.context.createImageData(canvas.width, canvas.height);
        var renderListenr = ()=>{
            if (this.image.width != this.canvas.width || this.image.height != this.canvas.height) {
                this.image = this.context.createImageData(this.canvas.width, this.canvas.height);
            }
            if (this.image) {
                this.copyImage(this.image.data, this.image.width, this.image.height);
            }
            this.context.putImageData(this.image, 0, 0);
        }
        if (typeof this.renderListenr === 'function') {
            this.removeListener('update', this.renderListenr);
        }
        this.on('update', renderListenr);
        this.renderListenr = renderListenr;
    }
}

/**
 * 关闭预览器。
 *
 * @method close
 * @public
 * @sync
 * @example
 *     previewer.close();
 **/
urtc.Previewer.prototype.close = function() {
    this.__close__();
}

/*******************************************************************************
* @class urtc.DeviceListener
*******************************************************************************/

/**
 * @method _internalCallback
 * @private
 * 
 * 
 **/
urtc.DeviceListener.prototype._internalCallback = function(type, __arg2, __arg3){
    switch(type){
        case 'deviceAdded':
            // __arg2 is device name
            this.emit(type, __arg2);
            break;
        case 'deviceRemoved':
            // __arg2 is device name
            this.emit(type, __arg2);
            break;
        case 'deviceStateChanged':
            // __arg2 is device name
            // __arg3 is new state
            this.emit(type, __arg2, __arg3);
            break;
        case 'defaultDeviceChanged':
            // __arg2 is device name
            // __arg3 is flow
            // __arg4 is role
            this.emit(type, __arg2, __arg3, arguments[3]);
            break;
        case 'propertyValueChanged':
            // __arg2 is device name
            // __arg3 is property value
            this.emit(type, __arg2, __arg3);
            break;
        case 'close':
            this.emit('close');
            break;
    }
}

/**
 * 为特定事件添加一个监听处理程序.
 *
 * @method on
 * @public
 * @async
 * @param event_name {String} 要订阅的事件名称
 * @param callback {function} 事件处理函数
 * @example
 *     deviceListener.on('error', function(err){
 *         if (err) {
 *             console.dir(err);
 *         }
 *     });
 **/

/**
 * 预览关闭事件及其事件监听处理程序.
 *
 * @event close
 * @example
 *     deviceListener.on('close', function(){
 *         // do something
 *     });
 **/

/**
 * 错误事件及其事件监听处理程序.
 * 如果添加'error'事件监听函数，则当出现内部错误时回调函数将被调用。
 *
 * @event error
 * @param error_msg {Error} 错误信息
 * @example
 *     deviceListener.on('error', function(err){
 *         if (err) {
 *             console.dir(err);
 *         }
 *     });
 **/

/**
 * 新加设备
 *
 * @event deviceAdded
 * @param deviceName {String} 设备名称
 * @example
 *     deviceListener.on('deviceAdded', function(deviceName){
 *         console.log(deviceName);
 *     });
 **/

/**
 * 设备移除
 *
 * @event deviceRemoved
 * @param deviceName {String} 设备名称
 * @example
 *     deviceListener.on('deviceRemoved', function(deviceName){
 *         console.log(deviceName);
 *     });
 **/

/**
 * 设备状态变化
 *
 * @event deviceStateChanged
 * @param deviceName {String} 设备名称
 * @param newState {String} 新状态
 * @example
 *     deviceListener.on('deviceStateChanged', function(deviceName, newState){
 *         console.log(deviceName, newState);
 *     });
 **/

/**
 * 默认设备变化
 *
 * @event defaultDeviceChanged
 * @param deviceName {String} 设备名称
 * @param flow {String} 流向
 * @param role {String} 角色
 * @example
 *     deviceListener.on('defaultDeviceChanged', function(deviceName, flow, role){
 *         console.log(deviceName, flow, role);
 *     });
 **/

/**
 * 设备属性值变化(耳机插拔)
 *
 * @event propertyValueChanged
 * @param deviceName {String} 设备名称
 * @param propertyValue {String} 新属性值
 * @example
 *     deviceListener.on('propertyValueChanged', function(deviceName, propertyValue){
 *         console.log(deviceName, propertyValue);
 *     });
 **/

/**
 * 关闭预览器。
 *
 * @method close
 * @public
 * @sync
 * @example
 *     deviceListener.close();
 **/
urtc.DeviceListener.prototype.close = function() {
    this.__close__();
}

/*******************************************************************************
* @class 
*******************************************************************************/

/**
 * 指定日志路径.
 *
 * @method openLog
 * @public
 * @param logPath {String} 日志文件路径.
 * @example
 *     urtc.openLog('d:/work/bin/log/urtc.log');
 **/
urtc.openLog = function(logPath){
    return urtc.__openLog__(logPath);
}

/**
 * 设置媒体服务器地址。
 *
 * @method setDebugFmsUrl
 * @public
 * @sync
 * @example
 *     client.setDebugFmsUrl(url);
 **/
urtc.setDebugFmsUrl = function(url){
    if (typeof url !== 'string') {
        throw TypeError('Invalid url.')
    }
    return urtc.__setDebugFmsUrl__(url);
}

/**
 * 创建IM客户端实例.
 *
 * @method createRTC
 * @public
 * @param config {Object} user client config. 
 * @example
 *     var client = urtc.createRTC(config);
 **/
urtc.createRTC = function(config){
    return urtc.__createRTC__(config);
}

/**
 * 获取设备列表。
 *
 * @method listDevices
 * @public
 * @sync
 * @param deviceType {UInt32} 1:video devices; 0:audio devices. 
 * @example
 *     var devices = urtc.listDevices(1);
 **/
urtc.listDevices = function(deviceType){
    return urtc.__listDevices__(deviceType);
}

/**
 * 获取摄像头设备能力列表。
 *
 * @method listCameraCaps
 * @public
 * @sync
 * @param deviceName {String} 摄像头名称
 * @example
 *     var caps = urtc.listCameraCaps(1);
 **/
urtc.listCameraCaps = function(deviceName){
    return urtc.__listCameraCaps__(deviceName);
}

/**
 * 获取声音输出设备列表。
 *
 * @method listLoopbackDevices
 * @public
 * @sync
 * @example
 *     var devices = urtc.listLoopbackDevices();
 **/
urtc.listLoopbackDevices = function(){
    return urtc.__listLoopbackDevices__();
}

/**
 * 获取默认声音输出设备。
 *
 * @method listDefaultLoopbackDevice
 * @public
 * @sync
 * @example
 *     var devices = urtc.listDefaultLoopbackDevice();
 **/
urtc.listDefaultLoopbackDevice = function(){
    return urtc.__listDefaultLoopbackDevice__();
}

/**
 * 创建设备监听器.
 *
 * @method createDeviceListener
 * @public
 * @example
 *     var deviceListener = urtc.createDeviceListener();
 **/
urtc.createDeviceListener = function(){
    return urtc.__createDeviceListener__();
}

//*******************************************************************************
// Exports : 
//*******************************************************************************

module.exports = urtc;

//*******************************************************************************
// End of file : urtc.js
//*******************************************************************************
